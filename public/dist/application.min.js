"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("eventCategories"),ApplicationConfiguration.registerModule("events",["ui.bootstrap.datetimepicker"]),ApplicationConfiguration.registerModule("ideas"),ApplicationConfiguration.registerModule("projects"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Articles",state:"articles",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","articles",{title:"List Articles",state:"articles.list"}),Menus.addSubMenuItem("topbar","articles",{title:"Create Articles",state:"articles.create",roles:["user"]})}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html"}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/create-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html"}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/edit-article.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("chat").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat"})}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket",function($scope,$location,Authentication,Socket){$scope.messages=[],Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>"}).state("admin.index",{url:"",templateUrl:"modules/core/client/views/admin/index.client.view.html"})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/users/client/views/authentication/welcome.client.view.html"}).state("login",{url:"/login",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("global",{url:"/home",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","$location",function($scope,$state,Authentication,$location){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=document.getElementById("side-menu"),$scope.isCollapsed=!0,$scope.toggleCollapsibleMenu=function(forceClose){$scope.isCollapsed=forceClose||!$scope.isCollapsed,$scope.isCollapsed?$scope.menu.style.left="-200px":$scope.menu.style.left="0px"},$scope.$on("$stateChangeSuccess",function(){$scope.closeMenu();var path=$location.path(),defaultMenu=[{title:"Home","ui-sref":"global()"},{title:"Projects","ui-sref":"projects.list()"}],adminMenu=[{title:"Home","ui-sref":"global()"},{title:"Admin Home","ui-sref":"admin.index()"}];-1!==path.indexOf("admin")?$scope.activeMenu=adminMenu:$scope.activeMenu=defaultMenu}),$scope.closeMenu=function(){$scope.toggleCollapsibleMenu(!0)}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("eventCategories").config(["$stateProvider",function($stateProvider){$stateProvider.state("eventCategories",{"abstract":!0,url:"/admin/eventCategories",template:"<ui-view/>"}).state("eventCategories.index",{url:"",templateUrl:"modules/eventCategories/client/views/list.client.view.html"}).state("eventCategories.create",{url:"/create",templateUrl:"modules/eventCategories/client/views/create.client.view.html"}).state("eventCategories.edit",{url:"/:eventCategoryId/edit",templateUrl:"modules/eventCategories/client/views/edit.client.view.html"})}]),angular.module("eventCategories").controller("EventCategoriesController",["$scope","$state","$stateParams","$location","EventCategory",function($scope,$state,$stateParams,$location,EventCategory){$scope.create=function(){var i,questions=[];for(i=0;i<$scope.questions.length;i++)questions.push($scope.questions[i].content);var eventCategory=new EventCategory({title:this.title,description:this.description,questions:questions});eventCategory.$save(function(response){$location.path("admin/eventCategories"),$scope.title=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){var i,eventCategory=$scope.eventCategory,questions=[];for(i=0;i<$scope.questions.length;i++)questions.push($scope.questions[i].content);eventCategory.questions=questions,eventCategory.$update(function(){$location.path("admin/eventCategories")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.eventCategories=EventCategory.query()},$scope.findOne=function(){EventCategory.get({eventCategoryId:$stateParams.eventCategoryId},function(eventCategory){$scope.eventCategory=eventCategory;var i;for($scope.questions=[],i=0;i<$scope.eventCategory.questions.length;i++)$scope.questions.push({num:i+1,content:$scope.eventCategory.questions[i]})})},$scope.remove=function(eventCategory){if(eventCategory){eventCategory.$remove();for(var i in $scope.eventCategories)$scope.eventCategories[i]===eventCategory&&$scope.eventCategories.splice(i,1);$location.path("admin/eventCategories")}else $scope.eventCategory.$remove(function(){$location.path("admin/eventCategories")})},$scope.deleteQuestion=function(questionIndex){var i,questions=[];for(i=0;i<$scope.questions.length;i++)i!==questionIndex-1&&questions.push($scope.questions[i]);$scope.questions=questions},$scope.initCreate=function(){$scope.questions=[{num:1,content:""}]},$scope.addQuestion=function(){$scope.questions.push({num:$scope.questions.length+1,content:""})}}]),angular.module("eventCategories").factory("EventCategory",["$resource",function($resource){return $resource("api/admin/eventCategories/:eventCategoryId",{eventCategoryId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("events").config(["$stateProvider",function($stateProvider){$stateProvider.state("events",{"abstract":!0,url:"/admin/events",template:"<ui-view/>"}).state("events.index",{url:"",templateUrl:"modules/events/client/views/list.client.view.html"}).state("events.create",{url:"/create",templateUrl:"modules/events/client/views/create.client.view.html"}).state("events.edit",{url:"/:eventId/edit",templateUrl:"modules/events/client/views/edit.client.view.html"})}]),angular.module("events").controller("EventsController",["$scope","$state","$stateParams","$location","HackathonEvent","EventCategory",function($scope,$state,$stateParams,$location,HackathonEvent,EventCategory){EventCategory.query(function(eventCategories){$scope.eventCategories=eventCategories,$scope.eventCategoriesMap={};for(var i=0;i<$scope.eventCategories.length;i++)$scope.eventCategoriesMap[i]=$scope.eventCategories[i];$scope.resetSelectedCategories()}),$scope.resetSelectedCategories=function(){$scope.selectedCategories={};for(var i=0;i<$scope.eventCategories.length;i++)$scope.selectedCategories[i]=!1},$scope.create=function(){var categories=[];for(var key in $scope.selectedCategories)$scope.selectedCategories.hasOwnProperty(key)&&$scope.selectedCategories[key]!==!1&&categories.push($scope.eventCategoriesMap[key]._id);var event=new HackathonEvent({title:this.title,description:this.description,locations:this.locations,categories:categories,start:this.start,end:this.end});event.$save(function(response){$location.path("admin/events"),$scope.title="",$scope.description="",$scope.locations="",$scope.categories=[],$scope.resetSelectedCategories()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){var event=$scope.event,categories=[];for(var key in $scope.selectedCategories)$scope.selectedCategories.hasOwnProperty(key)&&$scope.selectedCategories[key]!==!1&&categories.push($scope.eventCategoriesMap[key]._id);event.categories=categories,$scope.resetSelectedCategories(),event.$update(function(){$location.path("admin/events")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.events=HackathonEvent.query({})},$scope.findOne=function(){HackathonEvent.get({eventId:$stateParams.eventId},function(event){$scope.event=event;for(var i=0;i<$scope.eventCategories.length;i++){$scope.selectedCategories[i]=!1;for(var j=0;j<$scope.event.categories.length;j++)$scope.eventCategories[i]._id===$scope.event.categories[j]._id&&($scope.selectedCategories[i]=!0)}})},$scope.remove=function(event){event?(event.$remove(),$location.path("admin/events")):$scope.event.$remove(function(){$location.path("admin/events")})}}]),angular.module("events").factory("HackathonEvent",["$resource",function($resource){return $resource("api/admin/events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("ideas").config(["$stateProvider",function($stateProvider){$stateProvider.state("ideas",{"abstract":!0,url:"/ideas",template:"<ui-view/>"}).state("ideas.list",{url:"",templateUrl:"modules/ideas/client/views/list-ideas.client.view.html"}).state("ideas.create",{url:"/create",templateUrl:"modules/ideas/client/views/create-idea.client.view.html"}).state("ideas.success",{url:"/success",templateUrl:"modules/ideas/client/views/success.client.view.html"}).state("ideas.view",{url:"/:ideaId",templateUrl:"modules/ideas/client/views/view-idea.client.view.html"})}]),angular.module("ideas").controller("IdeasController",["$scope","$state","$stateParams","$location","Ideas","$rootScope",function($scope,$state,$stateParams,$location,Ideas,$rootScope){function shuffle(array){for(var temporaryValue,randomIndex,currentIndex=array.length;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),currentIndex-=1,temporaryValue=array[currentIndex],array[currentIndex]=array[randomIndex],array[randomIndex]=temporaryValue;return array}$rootScope.activeIdea||($rootScope.activeIdea={description:{}}),$scope.saveIdeaInfo=function(){$rootScope.activeIdea.title=this.title,$rootScope.activeIdea.description["long"]=this.details,$location.path("ideas/success")},$scope.create=function(isValid){$scope.error=null;var idea=new Ideas($rootScope.activeIdea);idea.$save(function(response){$location.path("ideas/"+response._id),$rootScope.activeIdea=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(idea){if(idea){idea.$remove();for(var i in $scope.ideas)$scope.ideas[i]===idea&&$scope.ideas.splice(i,1)}else $scope.idea.$remove(function(){$location.path("ideas")})},$scope.find=function(){$scope.ideas=Ideas.query(function(ideas){shuffle(ideas),$scope.ideas=ideas})},$scope.findOne=function(){$scope.idea=Ideas.get({ideaId:$stateParams.ideaId})}}]),angular.module("ideas").factory("Ideas",["$resource",function($resource){return $resource("api/ideas/:ideaId",{ideaId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("projects",{"abstract":!0,url:"/projects",template:"<ui-view/>"}).state("projects.list",{url:"",templateUrl:"modules/projects/client/views/list-projects.client.view.html"}).state("projects.create",{url:"/create",templateUrl:"modules/projects/client/views/create-project.client.view.html"}).state("projects.category",{url:"/category",templateUrl:"modules/projects/client/views/create-project-pick-category.client.view.html"}).state("projects.team",{url:"/team",templateUrl:"modules/projects/client/views/create-project-pick-team.client.view.html"}).state("projects.view",{url:"/:projectId",templateUrl:"modules/projects/client/views/view-project.client.view.html"}).state("projects.edit",{url:"/:projectId/edit",templateUrl:"modules/projects/client/views/edit-project.client.view.html"})}]),angular.module("projects").controller("ProjectsController",["$scope","$state","$stateParams","$location","Projects","$rootScope",function($scope,$state,$stateParams,$location,Projects,$rootScope){function shuffle(array){for(var temporaryValue,randomIndex,currentIndex=array.length;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),currentIndex-=1,temporaryValue=array[currentIndex],array[currentIndex]=array[randomIndex],array[randomIndex]=temporaryValue;return array}$rootScope.activeProject||($rootScope.activeProject={description:{}}),$scope.categories=[{id:0,title:"Category 1",description:"Hey there, this is the category description..."},{id:1,title:"Category 2",description:"Hi there, this is the category description..."},{id:2,title:"Category 3",description:"Hello there, this is the category description..."}],$scope.activeCategory=$scope.categories[0],$scope.saveProjectInfo=function(){$rootScope.activeProject.title=this.title,$rootScope.activeProject.description["short"]=this["short"],$rootScope.activeProject.description["long"]=this["long"],$location.path("projects/category")},$scope.setActiveCategory=function(category){$scope.activeCategory=category},$scope.saveProjectCategory=function(){$rootScope.activeProject.category=$scope.activeCategory.title,$location.path("projects/team")},$scope.create=function(isValid){$scope.error=null;var project=new Projects($rootScope.activeProject);project.$save(function(response){$location.path("projects/"+response._id),$rootScope.activeProject=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(project){if(project){project.$remove();for(var i in $scope.projects)$scope.projects[i]===project&&$scope.projects.splice(i,1)}else $scope.project.$remove(function(){$location.path("projects")})},$scope.update=function(isValid){return $scope.error=null,isValid?void $scope.project.$update(function(){$location.path("projects/"+$scope.project._id)},function(errorResponse){$scope.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","projectForm"),!1)},$scope.find=function(){$scope.projects=Projects.query(function(projects){$scope.projects=projects})},$scope.randomSort=function(){var projects=$scope.projects;shuffle(projects)},$scope.findOne=function(){$scope.project=Projects.get({projectId:$stateParams.projectId})},$scope.vote=function(project){project.votes+=1,document.getElementById("voteButton").style.backgroundColor="#63666A",document.getElementById("voteButton").innerHTML="Voted!",document.getElementById("voteButton").style.color="#FFFFFF",Projects.update({projectId:$stateParams.projectId},{votes:project.votes})},$scope.users=[{name:"Jim"},{name:"Jimbo"},{name:"Dabo"}]}]),angular.module("projects").factory("Projects",["$resource",function($resource){return $resource("api/projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/home"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"global",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){
return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);