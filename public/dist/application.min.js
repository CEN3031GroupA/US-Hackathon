"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(!toState.data||!toState.data.allowAnon){if(toState.data&&toState.data.adminOnly&&!Authentication.user.isAdmin)return event.preventDefault(),void $state.go("forbidden");(void 0===Authentication.user||"object"!=typeof Authentication.user)&&(event.preventDefault(),$state.go("signin"))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("chat"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("eventCategories"),ApplicationConfiguration.registerModule("events",["ui.bootstrap.datetimepicker"]),ApplicationConfiguration.registerModule("faqs"),ApplicationConfiguration.registerModule("ideas"),ApplicationConfiguration.registerModule("projects",["ja.qr"]),function(app){app.registerModule("questions")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("subevents",["ui.bootstrap.datetimepicker"]),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Articles",state:"articles",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","articles",{title:"List Articles",state:"articles.list"}),Menus.addSubMenuItem("topbar","articles",{title:"Create Articles",state:"articles.create",roles:["user"]})}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("articles",{"abstract":!0,url:"/articles",template:"<ui-view/>"}).state("articles.list",{url:"",templateUrl:"modules/articles/client/views/list-articles.client.view.html"}).state("articles.create",{url:"/create",templateUrl:"modules/articles/client/views/create-article.client.view.html",data:{roles:["user","admin"]}}).state("articles.view",{url:"/:articleId",templateUrl:"modules/articles/client/views/view-article.client.view.html"}).state("articles.edit",{url:"/:articleId/edit",templateUrl:"modules/articles/client/views/edit-article.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("api/articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("chat").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Chat",state:"chat"})}]),angular.module("chat").config(["$stateProvider",function($stateProvider){$stateProvider.state("chat",{url:"/chat",templateUrl:"modules/chat/client/views/chat.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("chat").controller("ChatController",["$scope","$location","Authentication","Socket",function($scope,$location,Authentication,Socket){$scope.messages=[],Authentication.user||$location.path("/"),Socket.socket||Socket.connect(),Socket.on("chatMessage",function(message){$scope.messages.unshift(message)}),$scope.sendMessage=function(){var message={text:this.messageText};Socket.emit("chatMessage",message),this.messageText=""},$scope.$on("$destroy",function(){Socket.removeListener("chatMessage")})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{adminOnly:!0}}).state("admin.index",{url:"",templateUrl:"modules/core/client/views/admin/index.client.view.html"})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","$location","$http",function($scope,$state,Authentication,$location,$http){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=document.getElementById("side-menu"),$scope.isCollapsed=!0,$scope.toggleCollapsibleMenu=function(forceClose){$scope.isCollapsed=forceClose||!$scope.isCollapsed,$scope.isCollapsed?$scope.menu.style.left="-200px":$scope.menu.style.left="0px"},$scope.logout=function(){$http.post("/logout").success(function(){delete $scope.authentication.user,$state.go("signin",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.$on("$stateChangeSuccess",function(){$scope.loggedIn=void 0!==Authentication.user&&"object"==typeof Authentication.user,$scope.closeMenu(),$scope.activeMenu=[{title:"Home","ui-sref":"home()"},{title:"Schedule","ui-sref":"schedule.index()"},{title:"Projects","ui-sref":"projects.list()"},{title:"Ideas","ui-sref":"ideas.list()"},{title:"FAQs","ui-sref":"faqs.list()"}],$scope.loggedIn&&$scope.authentication.user.isAdmin&&$scope.activeMenu.push({title:"Admin Home","ui-sref":"admin.index()"})}),$scope.closeMenu=function(){$scope.toggleCollapsibleMenu(!0)}}]),angular.module("core").controller("HomeController",["$scope","$interval","Authentication","ActiveEvent",function($scope,$interval,Authentication,ActiveEvent){$scope.authentication=Authentication,$scope.init=function(){ActiveEvent.get().then(function(activeEvent){$scope.activeEvent=activeEvent,$scope.calcEventTime(),$interval($scope.calcEventTime,1e3)})},$scope.calcEventTime=function(){var timeLeft,timeTill,days,hours,minutes,seconds,now=new Date,startDate=new Date($scope.activeEvent.start),endDate=new Date($scope.activeEvent.end);now>startDate?($scope.activeEvent.inProgress=!0,timeLeft=parseInt((endDate-now)/1e3),hours=parseInt(timeLeft/3600),minutes=parseInt((timeLeft-60*hours*60)/60),seconds=timeLeft-60*hours*60-60*minutes,$scope.activeEvent.timer=hours+":"+minutes+":"+seconds):($scope.activeEvent.inProgress=!1,timeTill=parseInt((startDate-now)/1e3),days=parseInt(timeTill/86400),hours=parseInt((timeTill-24*days*60*60)/60/60),minutes=parseInt((timeTill-24*days*60*60-60*hours*60)/60),$scope.activeEvent.timer=days+" days, "+hours+" hours, "+minutes+" minutes")}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("eventCategories").config(["$stateProvider",function($stateProvider){$stateProvider.state("eventCategories",{"abstract":!0,url:"/admin/eventCategories",template:"<ui-view/>",data:{adminOnly:!0}}).state("eventCategories.index",{url:"",templateUrl:"modules/eventCategories/client/views/list.client.view.html"}).state("eventCategories.create",{url:"/create",templateUrl:"modules/eventCategories/client/views/create.client.view.html"}).state("eventCategories.edit",{url:"/:eventCategoryId/edit",templateUrl:"modules/eventCategories/client/views/edit.client.view.html"})}]),angular.module("eventCategories").controller("EventCategoriesController",["$scope","$state","$stateParams","$location","EventCategory",function($scope,$state,$stateParams,$location,EventCategory){$scope.create=function(){var i,questions=[];for(i=0;i<$scope.questions.length;i++)questions.push($scope.questions[i].content);var eventCategory=new EventCategory({title:this.title,description:this.description,questions:questions});eventCategory.$save(function(response){$location.path("admin/eventCategories"),$scope.title=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){var i,eventCategory=$scope.eventCategory,questions=[];for(i=0;i<$scope.questions.length;i++)questions.push($scope.questions[i].content);eventCategory.questions=questions,eventCategory.$update(function(){$location.path("admin/eventCategories")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.eventCategories=EventCategory.query()},$scope.findOne=function(){EventCategory.get({eventCategoryId:$stateParams.eventCategoryId},function(eventCategory){$scope.eventCategory=eventCategory;var i;for($scope.questions=[],i=0;i<$scope.eventCategory.questions.length;i++)$scope.questions.push({num:i+1,content:$scope.eventCategory.questions[i]})})},$scope.remove=function(eventCategory){if(eventCategory){eventCategory.$remove();for(var i in $scope.eventCategories)$scope.eventCategories[i]===eventCategory&&$scope.eventCategories.splice(i,1);$location.path("admin/eventCategories")}else $scope.eventCategory.$remove(function(){$location.path("admin/eventCategories")})},$scope.deleteQuestion=function(questionIndex){var i,questions=[];for(i=0;i<$scope.questions.length;i++)i!==questionIndex-1&&questions.push($scope.questions[i]);$scope.questions=questions},$scope.initCreate=function(){$scope.questions=[{num:1,content:""}]},$scope.addQuestion=function(){$scope.questions.push({num:$scope.questions.length+1,content:""})}}]),angular.module("eventCategories").factory("EventCategory",["$resource",function($resource){return $resource("api/admin/eventCategories/:eventCategoryId",{eventCategoryId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("events").config(["$stateProvider",function($stateProvider){$stateProvider.state("events",{"abstract":!0,url:"/admin/events",template:"<ui-view/>",data:{adminOnly:!0}}).state("events.index",{url:"",templateUrl:"modules/events/client/views/list.client.view.html"}).state("events.create",{url:"/create",templateUrl:"modules/events/client/views/create.client.view.html"}).state("events.manage",{url:"/:eventId",templateUrl:"modules/events/client/views/manage.client.view.html"}).state("events.edit",{url:"/:eventId/edit",templateUrl:"modules/events/client/views/edit.client.view.html"})}]),angular.module("events").controller("EventsController",["$scope","$state","$stateParams","$location","HackathonEvent","EventCategory",function($scope,$state,$stateParams,$location,HackathonEvent,EventCategory){EventCategory.query(function(eventCategories){$scope.eventCategories=eventCategories,$scope.eventCategoriesMap={};for(var i=0;i<$scope.eventCategories.length;i++)$scope.eventCategoriesMap[i]=$scope.eventCategories[i];$scope.resetSelectedCategories()}),$scope.resetSelectedCategories=function(){$scope.selectedCategories={};for(var i=0;i<$scope.eventCategories.length;i++)$scope.selectedCategories[i]=!1},$scope.create=function(){var categories=[];for(var key in $scope.selectedCategories)$scope.selectedCategories.hasOwnProperty(key)&&$scope.selectedCategories[key]!==!1&&categories.push($scope.eventCategoriesMap[key]._id);var event=new HackathonEvent({title:this.title,description:this.description,locations:this.locations,categories:categories,start:this.start,end:this.end});event.$save(function(response){$location.path("admin/events"),$scope.title="",$scope.description="",$scope.locations="",$scope.categories=[],$scope.resetSelectedCategories()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.update=function(){var event=$scope.event,categories=[];for(var key in $scope.selectedCategories)$scope.selectedCategories.hasOwnProperty(key)&&$scope.selectedCategories[key]!==!1&&categories.push($scope.eventCategoriesMap[key]._id);event.categories=categories,$scope.resetSelectedCategories(),event.$update(function(){$location.path("admin/events")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.events=HackathonEvent.query({})},$scope.findOne=function(){HackathonEvent.get({eventId:$stateParams.eventId},function(event){$scope.event=event;for(var i=0;i<$scope.eventCategories.length;i++){$scope.selectedCategories[i]=!1;for(var j=0;j<$scope.event.categories.length;j++)$scope.eventCategories[i]._id===$scope.event.categories[j]._id&&($scope.selectedCategories[i]=!0)}})},$scope.remove=function(event){event?(event.$remove(),$location.path("admin/events")):$scope.event.$remove(function(){$location.path("admin/events")})}}]),angular.module("events").factory("HackathonEvent",["$resource",function($resource){return $resource("api/admin/events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}},{latest:{method:"POST"}})}]).service("ActiveEvent",["$http",function($http){this.get=function(){return $http.get("/api/events/latest").then(function(response){return response.data})}}]),angular.module("faqs").config(["$stateProvider",function($stateProvider){$stateProvider.state("faqs",{"abstract":!0,url:"/faqs",template:"<ui-view/>"}).state("faqs.list",{url:"",templateUrl:"modules/faqs/client/views/list-faqs.client.view.html"}).state("faqs.respond",{url:"/faq/:faqId/Respond",templateUrl:"modules/faqs/client/views/respond-faq.client.view.html"})}]);var faqsApp=angular.module("faqs");faqsApp.controller("FAQsController",["$scope","$state","$stateParams","$location","FAQs","$rootScope","$http",function($scope,$state,$stateParams,$location,FAQs,$rootScope,$http){$scope.find=function(){$scope.faqs=FAQs.query()},$scope.findOne=function(){$scope.faq=FAQs.get({faqId:$stateParams.faqId}),console.log($scope.faq)},$scope.addAnswer=function(){console.log($scope.faq);var answer=this.answer,req={method:"POST",url:"/api/faqs/"+$scope.faq._id+"/addAnswer",data:{answer:answer}};this.answer="",$http(req).then(function(response){$scope.faq=response.data},function(err){console.error(err)})},$scope.post=function(isValid){$scope.error=null;var faq=new FAQs({question:this.question,date:Date,user:this.user});faq.$save(function(response){$scope.faqs.push(response),$scope.askme=!1},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("faqs").factory("FAQs",["$resource",function($resource){return $resource("api/faqs/:faqId",{projectId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("ideas").config(["$stateProvider",function($stateProvider){$stateProvider.state("ideas",{"abstract":!0,url:"/ideas",template:"<ui-view/>"}).state("ideas.list",{url:"",templateUrl:"modules/ideas/client/views/list-ideas.client.view.html"}).state("ideas.create",{url:"/create",templateUrl:"modules/ideas/client/views/create-idea.client.view.html"}).state("ideas.success",{url:"/success",templateUrl:"modules/ideas/client/views/success.client.view.html"}).state("ideas.edit",{url:"/:ideaId/edit",templateUrl:"modules/ideas/client/views/edit-idea.client.view.html"}).state("ideas.view",{url:"/:ideaId",templateUrl:"modules/ideas/client/views/view-idea.client.view.html"})}]),angular.module("ideas").controller("IdeasController",["$scope","$state","$stateParams","$location","Ideas","Authentication","Users","$rootScope","$http",function($scope,$state,$stateParams,$location,Ideas,Authentication,Users,$rootScope,$http){function shuffle(array){for(var temporaryValue,randomIndex,currentIndex=array.length;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),currentIndex-=1,temporaryValue=array[currentIndex],array[currentIndex]=array[randomIndex],array[randomIndex]=temporaryValue;return array}$scope.authentication=Authentication,$scope.user=$scope.owner=$scope.authentication.user,$rootScope.activeIdea||($rootScope.activeIdea={description:{},owner:$scope.user,team:[]}),$scope.team=$rootScope.activeIdea.team,$scope.create=function(isValid){$scope.error=null;var idea=new Ideas($rootScope.activeIdea);$rootScope.activeIdea.title=this.title,$rootScope.activeIdea.youtube=this.youtube,$rootScope.activeIdea.description["short"]=this["short"],$rootScope.activeIdea.description["long"]=this["long"],idea.$save(function(){$location.path("ideas/success"),$rootScope.activeIdea=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(idea){if(idea){idea.$remove();for(var i in $scope.ideas)$scope.ideas[i]===idea&&$scope.ideas.splice(i,1)}else $scope.idea.$remove(function(){$location.path("ideas")})},$scope.update=function(isValid){return $scope.error=null,isValid?void $scope.idea.$update(function(){$location.path("ideas/"+$scope.idea._id)},function(errorResponse){$scope.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","ideaForm"),!1)},$scope.find=function(){$scope.ideas=Ideas.query(function(ideas){$scope.ideas=ideas,shuffle(ideas),$scope.ideas=ideas})},$scope.findOne=function(){$scope.idea=Ideas.get({ideaId:$stateParams.ideaId})},$scope.loadUsers=function(){$scope.users=Users.query(function(users){$scope.users=users;for(var i=0;i<$scope.users.length;i++)$scope.owner._id===$scope.users[i]._id&&$scope.users.splice(i,1)})},$scope.addMember=function(user){$rootScope.activeIdea.team.push(user);for(var i=0;i<$scope.users.length;i++)user._id===$scope.users[i]._id&&$scope.users.splice(i,1)},$scope.removeMember=function(user){$scope.users.push(user);for(var i=0;i<$rootScope.activeIdea.team.length;i++)user._id===$rootScope.activeIdea.team[i]._id&&$rootScope.activeIdea.team.splice(i,1)},$scope.addComment=function(){var comment=this.comment,req={method:"POST",url:"/api/ideas/"+$scope.idea._id+"/addComment",data:{content:comment}};this.comment="",$http(req).then(function(response){$scope.idea=response.data},function(err){console.error(err)})}}]),angular.module("ideas").factory("Ideas",["$resource",function($resource){return $resource("api/ideas/:ideaId",{ideaId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("projects",{"abstract":!0,url:"/projects",template:"<ui-view/>"}).state("projects.list",{url:"",templateUrl:"modules/projects/client/views/list-projects.client.view.html"}).state("projects.create",{url:"/create",templateUrl:"modules/projects/client/views/create-project.client.view.html"}).state("projects.category",{url:"/category",templateUrl:"modules/projects/client/views/create-project-pick-category.client.view.html"}).state("projects.team",{url:"/team",templateUrl:"modules/projects/client/views/create-project-pick-team.client.view.html"}).state("projects.view",{url:"/:projectId",templateUrl:"modules/projects/client/views/view-project.client.view.html"}).state("projects.edit",{url:"/:projectId/edit",templateUrl:"modules/projects/client/views/edit-project.client.view.html"}).state("projects.votes",{url:"/admin/projectsVotes",templateUrl:"modules/projects/client/views/list-projects-votes.client.view.html"})}]),angular.module("projects").config(["$sceDelegateProvider",function($sceDelegateProvider){$sceDelegateProvider.resourceUrlWhitelist(["self","*://www.youtube.com/**"])}]).controller("ProjectsController",["$scope","$state","$stateParams","$location","Projects","Authentication","Users","$rootScope","ActiveEvent","$http",function($scope,$state,$stateParams,$location,Projects,Authentication,Users,$rootScope,ActiveEvent,$http){function shuffle(array){for(var temporaryValue,randomIndex,currentIndex=array.length;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),currentIndex-=1,temporaryValue=array[currentIndex],array[currentIndex]=array[randomIndex],array[randomIndex]=temporaryValue;return array}$scope.authentication=Authentication,$scope.user=$scope.owner=$scope.authentication.user,$rootScope.activeProject||($rootScope.activeProject={description:{},owner:$scope.user,team:[]}),ActiveEvent.get().then(function(activeEvent){$scope.activeEvent=activeEvent,$scope.activeCategory=$scope.activeEvent.categories[0]}),$scope.team=$rootScope.activeProject.team,$scope.saveProjectInfo=function(){$rootScope.activeProject.title=this.title,$rootScope.activeProject.youtube=this.youtube,$rootScope.activeProject.description["short"]=this["short"],$rootScope.activeProject.description["long"]=this["long"],$location.path("projects/category")},$scope.setActiveCategory=function(category){$scope.activeCategory=category},$scope.saveProjectCategory=function(){$rootScope.activeProject.category=$scope.activeCategory.title,$location.path("projects/team")},$scope.create=function(isValid){$scope.error=null,$rootScope.activeProject.event=$scope.activeEvent;var project=new Projects($rootScope.activeProject);project.$save(function(response){$location.path("projects/"+response._id),$rootScope.activeProject=null},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(project){if(project){project.$remove();for(var i in $scope.projects)$scope.projects[i]===project&&$scope.projects.splice(i,1)}else $scope.project.$remove(function(){$location.path("projects")})},$scope.update=function(isValid){return $scope.error=null,isValid?void $scope.project.$update(function(){$location.path("projects/"+$scope.project._id)},function(errorResponse){$scope.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","projectForm"),!1)},$scope.find=function(){$scope.projects=Projects.query(function(projects){$scope.projects=projects,shuffle(projects),$scope.projects=projects})},$scope.findOne=function(){$scope.project=Projects.get({projectId:$stateParams.projectId},function(project){$scope.hasVoted=-1!==$scope.user.votedProjects.indexOf(project._id)})},$scope.hasVoted=!1,$scope.unvote=function(project){$http["delete"]("/api/projects/"+project._id+"/vote").success(function(){$scope.hasVoted=!1}).error(function(){console.log("data error")})},$scope.vote=function(project){$http.put("/api/projects/"+project._id+"/vote").success(function(){$scope.hasVoted=!0}).error(function(){console.log("data error")})},$scope.loadUsers=function(){$scope.users=Users.query(function(users){$scope.users=users;for(var i=0;i<$scope.users.length;i++)$scope.owner._id===$scope.users[i]._id&&$scope.users.splice(i,1)})},$scope.addMember=function(user){$rootScope.activeProject.team.push(user);for(var i=0;i<$scope.users.length;i++)user._id===$scope.users[i]._id&&$scope.users.splice(i,1)},$scope.removeMember=function(user){$scope.users.push(user);for(var i=0;i<$rootScope.activeProject.team.length;i++)user._id===$rootScope.activeProject.team[i]._id&&$rootScope.activeProject.team.splice(i,1)},$scope.addComment=function(){var comment=this.comment,req={method:"POST",url:"/api/projects/"+$scope.project._id+"/addComment",data:{content:comment}};this.comment="",$http(req).then(function(response){$scope.project=response.data},function(err){console.error(err)})}}]),angular.module("projects").factory("Projects",["$resource",function($resource){return $resource("api/projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),function(){function menuConfig(menuService){menuService.addMenuItem("topbar",{title:"Questions",state:"questions",type:"dropdown",roles:["*"]}),menuService.addSubMenuItem("topbar","questions",{title:"List Questions",state:"questions.list"}),menuService.addSubMenuItem("topbar","questions",{title:"Create Question",state:"questions.create",roles:["user"]})}angular.module("questions").run(menuConfig),menuConfig.$inject=["Menus"]}(),function(){function routeConfig($stateProvider){$stateProvider.state("questions",{"abstract":!0,url:"/questions",template:"<ui-view/>"}).state("questions.list",{url:"",templateUrl:"modules/questions/client/views/list-questions.client.view.html",controller:"QuestionsListController",controllerAs:"vm",data:{pageTitle:"Questions List"}}).state("questions.create",{url:"/create",templateUrl:"modules/questions/views/form-question.client.view.html",controller:"QuestionsController",controllerAs:"vm",resolve:{questionResolve:newQuestion},data:{roles:["user","admin"],pageTitle:"Questions Create"}}).state("questions.edit",{url:"/:questionId/edit",templateUrl:"modules/questions/views/form-question.client.view.html",
controller:"QuestionsController",controllerAs:"vm",resolve:{questionResolve:getQuestion},data:{roles:["user","admin"],pageTitle:"Edit Question {{ questionResolve.name }}"}}).state("questions.view",{url:"/:questionId",templateUrl:"modules/questions/views/view-question.client.view.html",controller:"QuestionsController",controllerAs:"vm",resolve:{questionResolve:getQuestion},data:{pageTitle:"Question {{ questionResolve.name }}"}})}function getQuestion($stateParams,QuestionsService){return QuestionsService.get({questionId:$stateParams.questionId}).$promise}function newQuestion(QuestionsService){return new QuestionsService}angular.module("questions").config(routeConfig),routeConfig.$inject=["$stateProvider"],getQuestion.$inject=["$stateParams","QuestionsService"],newQuestion.$inject=["QuestionsService"]}(),function(){function QuestionsListController(QuestionsService){var vm=this;vm.questions=QuestionsService.query()}angular.module("questions").controller("QuestionsListController",QuestionsListController),QuestionsListController.$inject=["QuestionsService"]}(),function(){function QuestionsController($scope,$state,$window,question){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.question.$remove($state.go("questions.list"))}function save(isValid){function successCallback(res){$state.go("questions.view",{questionId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.question._id?vm.question.$update(successCallback,errorCallback):vm.question.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.questionForm"),!1)}var vm=this;vm.question=question,vm.error=null,vm.form={},vm.remove=remove,vm.save=save}angular.module("questions").controller("QuestionsController",QuestionsController),QuestionsController.$inject=["$scope","$state","$window","questionResolve"]}(),function(){function QuestionsService($resource){return $resource("api/questions/:questionId",{questionId:"@_id"},{update:{method:"PUT"}})}angular.module("questions").factory("QuestionsService",QuestionsService),QuestionsService.$inject=["$resource"]}(),angular.module("subevents").config(["$stateProvider",function($stateProvider){$stateProvider.state("subevents",{"abstract":!0,url:"/admin/events/:eventId/subevents",template:"<ui-view/>",data:{adminOnly:!0}}).state("subevents.index",{url:"",templateUrl:"modules/subevents/client/views/list.client.view.html"}).state("subevents.create",{url:"/create",templateUrl:"modules/subevents/client/views/create.client.view.html"}).state("subevents.edit",{url:"/:subeventId/edit",templateUrl:"modules/subevents/client/views/edit.client.view.html"})}]).config(["$stateProvider",function($stateProvider){$stateProvider.state("schedule",{"abstract":!0,url:"/schedule",template:"<ui-view/>"}).state("schedule.index",{url:"",templateUrl:"modules/subevents/client/views/schedule.client.view.html"}).state("schedule.view",{url:"/:subeventId/view",templateUrl:"modules/subevents/client/views/view.client.view.html"})}]),angular.module("subevents").controller("SubEventsController",["$scope","$state","$stateParams","$location","SubEvent","HackathonEvent","ActiveEvent",function($scope,$state,$stateParams,$location,SubEvent,HackathonEvent,ActiveEvent){$scope.loadEvent=function(cb){$stateParams.eventId?HackathonEvent.get({eventId:$stateParams.eventId},function(event){$scope.event=event,cb&&cb(event)}):$scope.event=ActiveEvent.get().then(function(event){$scope.event=event,cb&&cb(event)})},$scope.loadEvent(),$scope.create=function(){var subevent=new SubEvent({title:this.title,description:this.description,location:this.location,datetime:this.datetime,event:$scope.event});subevent.$save({eventId:$scope.event._id},function(response){$location.path("admin/events"),$scope.title="",$scope.description="",$scope.location=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){var querySubevents=function(event){$scope.subevents=SubEvent.query({eventId:event._id})};$scope.loadEvent(querySubevents)},$scope.findOne=function(){var querySubevent=function(event){$scope.subevent=SubEvent.get({eventId:event._id,subeventId:$stateParams.subeventId})};$scope.loadEvent(querySubevent)},$scope.update=function(){$scope.subevent.$update(function(){$location.path("admin/events/"+$scope.event._id+"/subevents")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(subevent){subevent?(subevent.$remove(),$location.path("admin/events/"+$scope.event._id+"/subevents")):$scope.subevent.$remove(function(){$location.path("admin/events/"+$scope.event._id+"/subevents")})}}]),angular.module("events").factory("SubEvent",["$resource",function($resource){return $resource("api/admin/events/:eventId/subevents/:subeventId",{eventId:"@_id",subeventId:"@_id"},{update:{method:"PUT"}},{create:{method:"POST"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("user",{"abstract":!0,url:"/user",template:"<ui-view/>"}).state("signin",{url:"/signin?err",templateUrl:"modules/users/client/views/signin.client.view.html",data:{allowAnon:!0}}).state("user.welcome",{url:"/welcome",templateUrl:"modules/users/client/views/welcomescreens/welcome.client.view.html",data:{allowAnon:!0}}).state("user.welcome1",{url:"/welcome2",templateUrl:"modules/users/client/views/welcomescreens/welcome1.client.view.html",data:{allowAnon:!0}}).state("user.welcome2",{url:"/welcome3",templateUrl:"modules/users/client/views/welcomescreens/welcome2.client.view.html",data:{allowAnon:!0}}).state("user.view",{url:"/:userId",templateUrl:"modules/users/client/views/view-user.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication",function($scope,$state,$http,$location,$window,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&(console.log("ASD"),$location.path("/")),$scope.signin=function(isValid){var credentials={email:this.email,password:this.password};$scope.error=null,$http.post("/api/auth/signin",credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.update=function(){$scope.error=null,$scope.authentication.user.$update(function(){$http.put("/api/user/"+$scope.authentication.user._id)},function(response){$scope.error=response.data.message})}}]),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/user/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);